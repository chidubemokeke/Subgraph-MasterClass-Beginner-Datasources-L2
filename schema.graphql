type ProposalCreated @entity {
  id: ID! # Unique identifier for the proposal
  creationId: BigInt! # Unique identifier for the proposal creation event
  executed: [ProposalExecuted!]! @derivedFrom(field: "proposal") # Proposals Executed
  canceled: [ProposalCanceled!]! @derivedFrom(field: "proposal")
  proposer: Bytes! # DAO account that initiated the proposal
  targets: [Bytes!]! # Array of target addresses that the proposal interacts with
  values: [BigInt!]! # Array of values (amounts) sent to the targets
  signatures: [String!]! # Array of function signatures called on the targets
  calldatas: [Bytes!]! # Array of calldata bytes sent to the targets
  startBlock: BigInt! # Block number when the proposal starts
  endBlock: BigInt! # Block number when the proposal ends
  description: String! # Description of the proposal
  votesFor: BigInt! # Number of votes in favor of the proposal
  votesAgainst: BigInt! # Number of votes against the proposal
  votesAbstain: BigInt! # Number of votes abstaining from the proposal
  uniqueVoters: [Bytes!]! # Array of unique voter addresses who voted on the proposal
  votes: [VoteCast!]! @derivedFrom(field: "proposalId") # Array of votes cast for the proposal
}

type ProposalCanceled @entity {
  id: ID! # Unique identifier for the proposal cancellation event
  cancelId: BigInt! # Unique identifier for the cancellation
  proposal: ProposalCreated! # Reference to the proposal that was executed
  blockNumber: BigInt! # Block number when the proposal was canceled
  blockTimestamp: BigInt! # Timestamp when the proposal was canceled
  transactionHash: Bytes! # Transaction hash for the cancellation event
}

type ProposalExecuted @entity {
  id: ID! # Unique identifier for the proposal execution event
  executionId: BigInt! # Unique identifier for the execution
  proposal: ProposalCreated! # Reference to the proposal that was executed
  blockNumber: BigInt! # Block number when the proposal was executed
  blockTimestamp: BigInt! # Timestamp when the proposal was executed
  transactionHash: Bytes! # Transaction hash for the execution event
}

type ProposalQueued @entity {
  id: ID! # Unique identifier for the proposal queue event
  queueId: BigInt! # Unique identifier for the queue
  eta: BigInt! # Estimated time of arrival for the queue
  blockNumber: BigInt! # Block number when the proposal was queued
  blockTimestamp: BigInt! # Timestamp when the proposal was queued
  transactionHash: Bytes! # Transaction hash for the queue event
}

type VoteCast @entity {
  id: ID! # Unique identifier for the vote cast event
  voter: Bytes! # Address of the voter
  proposalId: ProposalCreated! # Identifier of the proposals being voted on
  support: Int! # Support type (0, 1, 2)
  votes: BigInt! # Number of votes cast
  reason: String # Reason for the vote (optional)
  blockNumber: BigInt! # Block number when the vote was cast
  blockTimestamp: BigInt! # Timestamp when the vote was cast
  transactionHash: Bytes! # Transaction hash for the vote cast event
}

type DelegateChanged @entity {
  id: ID! # Unique identifier for the delegate change event
  delegator: Bytes! # Address of the delegator
  fromDelegate: Bytes! # Address of the previous delegate
  toDelegate: Bytes! # Address of the new delegate
  blockNumber: BigInt! # Block number when the delegate change occurred
  blockTimestamp: BigInt! # Timestamp when the delegate change occurred
  transactionHash: Bytes! # Transaction hash for the delegate change event
}

type DelegateVotesChanged @entity {
  id: ID! # Unique identifier for the delegate votes change event
  delegate: Bytes! #
  previousBalance: BigInt! #Previous balance of the delegate's votes
  newBalance: BigInt! # New balance of the delegate's votes
  blockNumber: BigInt! # Block number when the votes change occurred
  blockTimestamp: BigInt! # Timestamp when the votes change occurred
  transactionHash: Bytes! # Transaction hash for the votes change event
}

type Transfer @entity {
  id: ID! # Unique identifier for the transfer event
  from: Bytes! # Address from which the tokens are transferred
  to: Bytes! # Address to which the tokens are transferred
  amount: BigInt! # Amount of tokens transferred
  blockNumber: BigInt! # Block number when the transfer occurred
  blockTimestamp: BigInt! # Timestamp when the transfer occurred
  transactionHash: Bytes! # Transaction hash for the transfer event
}
